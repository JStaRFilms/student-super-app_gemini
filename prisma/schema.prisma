// prisma/schema.prisma
datasource db {
  provider = "sqlite" // For local development
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String      @id @default(cuid())
  name          String?
  matricNumber  String?     @unique
  email         String?     @unique
  emailVerified DateTime?
  image         String?
  hashedPassword String?
  role          String      @default("STUDENT") // STUDENT, LSS_EXEC, ADMIN
  departmentId  String?
  department    Department? @relation(fields: [departmentId], references: [id])
  level         Int?
  accounts      Account[]
  sessions      Session[]
  announcements Announcement[]
  resources     Resource[]
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Faculty {
  id          String       @id @default(cuid())
  name        String       @unique
  departments Department[]
  announcements Announcement[]
}

model Department {
  id          String    @id @default(cuid())
  name        String    @unique
  facultyId   String
  faculty     Faculty   @relation(fields: [facultyId], references: [id])
  users       User[]
  announcements Announcement[]
}

model Announcement {
  id          String     @id @default(cuid())
  title       String
  content     String
  createdAt   DateTime   @default(now())
  authorId    String
  author      User       @relation(fields: [authorId], references: [id])
  // Scoping
  facultyId   String?
  faculty     Faculty?   @relation(fields: [facultyId], references: [id])
  departmentId String?
  department  Department? @relation(fields: [departmentId], references: [id])
}

model Resource {
  id          String   @id @default(cuid())
  title       String
  fileUrl     String
  type        String   // e.g., "Past Question", "Lecture Note"
  courseCode  String
  level       Int
  semester    Int
  uploaderId  String
  uploader    User     @relation(fields: [uploaderId], references: [id])
  createdAt   DateTime @default(now())
}

model AnonymousFeedback {
    id          String @id @default(cuid())
    content     String
    createdAt   DateTime @default(now())
    // Intentionally no user relation
}